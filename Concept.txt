Js Topics :- 

JavaScript Basics

Introduction to JavaScript and its usage✅
Variables: var, let, and const✅
Hoisting✅
Data Types (Primitives): String, Number, Boolean, Undefined, Null, Symbol, and BigInt✅
Data Types (Non-primitives): Arrays, Objects, Functions ✅

Operators:
Arithmetic operators: +, -, *, /, %, **
Comparison operators: ==, ===, !=, !==, >, <, >=, <=
Logical operators: &&, ||, !
Assignment operators: =, +=, -=, *=, /=, etc.

Comma Operator✅
let numb = (1,2,3,4,5);
console.log(numb) // 5 return the end value only because comma operatorworks from left to right;


Type Coercion and Conversion✅
Template Literals✅
Control Flow✅ it handles the execution of Program

Conditional Statements: if, else if, else, and switch statements✅
Loops:✅
switch statements✅
for, while, do...while✅
Loop controls: break, continue✅



Ternary Operator✅
Functions✅

Function Declarations✅
Function Expressions✅
Arrow Functions✅
IIFE (Immediately Invoked Function Expressions)✅
Parameters and Arguments✅
Rest and Spread Syntax in Functions✅
Intermediate Level Concepts
Arrays

Creating and Manipulating Arrays
Array Methods:
Mutating: push, pop, shift, unshift, splice, sort, reverse
Non-mutating: map, filter, reduce, forEach, find, findIndex, every, some, concat, slice
Nested Arrays and Flattening

Q:What is the difference between `Map` and `WeakMap` in JavaScript?⭐⭐⭐
==>> The Map object holds key-value pairs and remembers the original insertion order of the keys. Whereas, the WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. You can use any data type as a key or value in a Map whereas in WeakMap you can only use objects as keys. The WeakMap is not iterable whereas Map is. In WeakMap it holds the weak reference to the original object which means if there are no other references to an object stored in the WeakMap, those objects can be garbage collected.



Objects {}; 

Object Literals and Properties
Accessing and Modifying Properties
Object Methods:
Object.keys, Object.values,Object.fromEntries, Object.entries
Destructuring and Nested Destructuring
Object Spread and Rest
Closures and Scope :{
    1.function Scope
    2.global Scope
    3.blocked Scope
    4.module sccope
    5.Lexical scope
};

Global, Function, Block Scope✅
Lexical Scope and Closure✅
this Keyword in Different Contexts✅

Advanced Functions=

Callback Functions
Higher-Order Functions
Function Currying
Function Composition
Function composition in JavaScript is a powerful technique that allows you to combine multiple functions into a single function. This can make your code more modular and easier to read.
Asynchronous JavaScript

Callbacks and Callback Hell
Promises:
Creating and Resolving Promises
Promise chaining and error handling
Async/Await
Error Handling in Asynchronous Code,

Creating Custom Events:-
const event = new CustomEvent('roadmap-updated', {
  detail: { name: 'JavaScript' },
});
element.dispatchEvent(event);
element.addEventListener('roadmap-updated', (event) => {
  console.log(event.detail); // { name: 'JavaScript' }
});
function handleEvent(event) {
  console.log(event.detail); // { name: 'JavaScript' }
};

element.addEventListener('roadmap-updated', handleEvent);
element.removeEventListener('roadmap-updated', handleEvent);


Event Loop Basics
Advanced Level Concepts
Object-Oriented Programming (OOP) in JavaScript

this Keyword and Binding✅

Prototypal Inheritance
==>The prototype chain in JavaScript refers to the chain of objects linked by their prototypes. When a property or method is accessed on an object, JavaScript first checks the object itself. If it doesn't find it there, it looks up the property or method in the object's prototype. This process continues, moving up the chain from one prototype to the next, until the property or method is found or the end of the chain is reached (typically the prototype of the base object, which is null). The prototype chain is fundamental to JavaScript's prototypal inheritance model, allowing objects to inherit properties and methods from other objects.
eg:->

const roadmap = {
  getRoadmapUrl() {
    console.log(`https://roadmap.sh/${this.slug}`);
  },
};

const javascript = {
  name: 'JavaScript Roadmap',
  description: 'Learn JavaScript',
  slug: 'javascript',
  greet() {
    console.log(`${this.name} - ${this.description}`);
  },
};

Object.setPrototypeOf(javascript, roadmap); // or javascript.__proto__ = roadmap;

javascript.getRoadmapUrl(); // https://roadmap.sh/javascript
javascript.greet(); // JavaScript Roadmap - Learn JavaScript




ES6 Classes:-
Constructors, methods, 
inheritance =>Inheritance is a way to create a new Class from an existing Class. The new Class inherits all the properties and methods from the existing Class. The new Class is called the child Class, and the existing Class is called the parent Class.
(using keyword extends ok)


Static and Instance Methods
super and extends Keywords
Private and Public Fields
Functional Programming

Immutability and Pure Functions
Higher-Order Functions in Functional Programming
Closures in Functional Programming
Array and Object Immutability Techniques
Advanced Array Methods: reduce, flatMap
Modules and Module Patterns

Module Pattern
ES6 Modules: import, export, default export, named exports

IIFE for Module Creation
=>immediately Invoked Function Expressions (IIFEs) are commonly used for creating modules in JavaScript. They allow you to encapsulate functionality and create a private scope, preventing global namespace pollution. (Also known as Module & Module Revealing Pattern);

Error Handling

try...catch Blocks
Custom Error Messages
Throwing and Catching Errors
Error Types: SyntaxError, TypeError, ReferenceError, RangeError
Asynchronous Programming and Event Loop

Event Loop, Call Stack, Microtasks, and Macrotasks
setTimeout, setInterval, and clearInterval
Promise.all, Promise.race, Promise.any, and Promise.allSettled;

🚀🚀🚀
Expert Level Concepts:->

JavaScript Design Patterns:-

Singleton Pattern,
Module and Revealing Module Pattern,
Factory Pattern,
Observer Pattern (is a one of the part of Behavioural Pattern which is from term gang of 4),
Strategy Pattern,
Memory Management and Optimization

Garbage Collection
=> The JavaScript engine uses automatic garbage collection. JavaScript automatically manages memory by freeing up space used by objects no longer needed. This algorithm is called Mark and Sweep, which is performed periodically by the JavaScript engine.


Memory Leaks and Common Sources (e.g., global variables, closures)
Performance Optimization Techniques
Debouncing and Throttling
function debounce(fn,delay){
  let timer = null;
  return function(...args){
    if(timer){
      clearTimeout(timer)
      timer = null;
    }
    timer = setTimeout(()=>{
      fn.apply(this,args)
    },delay)
  }
};

function Throttle(fn,delay){
  let lastRan = null;
  let timer = null;
  return function(...args){
    if(!lastRan){
      fn.apply(this,args)
      lastRan = Date.now()
    } else {
      clearTimeout(timer)
      timer=setTimeout(()=>{
        if(Date.now() - lastRan >= delay){
          fn.apply(this,args)
          lastRan = Date.now()
        }
      },delay-(Date.now()-lastRan))
    }
  }
};



Advanced Data Structures and Algorithms:->

Linked Lists, hashmaps = {} , Stacks = [], and Queues in JavaScript
Hash Tables
Binary Trees and Binary Search Trees
Sorting Algorithms: Bubble, Merge, Quick, Insertion, Selection
Searching Algorithms: Linear and Binary Search
Event Handling and DOM Manipulation

Event Bubbling and Capturing
Event Delegation
addEventListener and removeEventListener
Manipulating the DOM (Document Object Model)
Regular Expressions (RegEx)

Basics of Regular Expressions
Common RegEx Patterns and Syntax
Using RegEx for String Manipulationh
Advanced Browser APIs,

Fetch API and HTTP Requests
Web Storage APIs: Local Storage, Session Storage, Cookies
MutationObserver for DOM Observation
Web Workers for Multithreading
Testing in JavaScript

Unit Testing Basics
Testing Libraries (e.g., Jest, Mocha, Chai)
Writing and Running Test Suites
Mocking and Test-Driven Development (TDD)



Git/Github things for aising PR and Resolve conflicts using SHH keys 
After setup an GitHub SSH key we have to simply clone repo using SSH clone not normally cli clone 

# via SSH (recommended)
git clone git@github.com:your-username/your-repo.git,

# OR via HTTPS (with CLI login)
git clone https://github.com/your-username/your-repo.git,

To check the remote URL for your repo:
git remote -v
 
output:->
origin  git@github.com:Mushin-Innovation-Labs/SWASTIKA.git (fetch),
origin  git@github.com:Mushin-Innovation-Labs/SWASTIKA.git (push)


step-1 simple open the repo using the file explorer using bash then first do this for login,

ssh -T git@github.com   

you get:-
Hi your-username! You've successfully authenticated, but GitHub does not provide shell access.

then we simply do:->

git status
git add .
git status
git commit -m "message about changes"
// create new branch if needed
git checkout -b "branch_name"

// if have already branch other than master;
git push origin branch_name


Now If we have conflicts during raising the PR or Pushing the code into existing branch before merge:-

so we have to solve the conflicts on our local by taking the pull or main/master;

we have to seen like this:-

<<<<<<< dashboard_new
// your branch's changes here
=======
// master branch's changes here
>>>>>>> master


git branch
git pull origin master
then open vsCode solve conflicts, after solve comes again on bash
git status
git add .
git commit -m "Resolved merge conflict between dashboard_new and master"
git push origin branch_name